#!/bin/bash
# Unified Monitoring Installer
# Author: ChatGPT (based on provided scripts)
# Description: Installs monitoring scripts (CPU/Memory, Disk, OOM, PHP-FPM) and configures cron jobs.

BASE_DIR="/var/cw/systeam"
MONITOR_DIR="$BASE_DIR/monitor-scripts-donot-delete"
CRON_DIR="/etc/cron.d"

echo "===== Monitoring Installer ====="
read -rp "Enter Slack Webhook URL: " SLACK_WEBHOOK_URL
read -rp "Enter Customer Name: " CUSTOMER_NAME
read -rp "Enter Server Public IP (leave blank to auto-detect): " SERVER_IP

if [ -z "$SERVER_IP" ]; then
  SERVER_IP=$(curl -s -4 ifconfig.me)
  echo "Auto-detected Server IP: $SERVER_IP"
fi

mkdir -p "$MONITOR_DIR"
mkdir -p "$BASE_DIR"

#############################################
# CPU & MEMORY MONITOR
#############################################
cat > "$MONITOR_DIR/cpu-memory-monitor.sh" <<EOF
#!/bin/bash
DATE=\$(date "+%Y-%m-%d %H:%M:")
LOGFILE=/var/log/cpu-memory-monitoring.log
SLACK_WEBHOOK_URL="$SLACK_WEBHOOK_URL"
CUSTOMER_NAME="$CUSTOMER_NAME"
SERVER_IP="$SERVER_IP"

CPU_USAGE_FLOAT=\$(sar -P ALL 30 4 | grep 'Average:        all' | awk -F" " '{print 100.0 -\$NF}')
i=1
while [ \$i -le 30 ]; do
  free | awk '/Mem/{printf("%.2f\\n", \$3/\$2*100)}' >> ram_used
  ((i++))
  sleep 1
done

Sum=\$(awk '{sum+=\$1} END {print sum}' ram_used)
count=\$(wc -l < ram_used)
RAM_USAGE_INT=\$(echo "\$Sum / \$count" | bc)
CPU_USAGE_INT=\$(printf "%.0f" "\$CPU_USAGE_FLOAT")
FLAG_FILE="/tmp/flag_file_autogenerated"

BACKUP_RUNNING=\$(pgrep -f "duplicity" > /dev/null && echo "yes" || echo "no")

if [[ ("\$CPU_USAGE_INT" -ge 95 || "\$RAM_USAGE_INT" -ge 90) && "\$BACKUP_RUNNING" == "yes" ]]; then
  echo "\${DATE}: Backup Process running" >> \${LOGFILE}
  rm ram_used
  exit
fi

if [[ ("\$CPU_USAGE_INT" -ge 95 || "\$RAM_USAGE_INT" -ge 90) && "\$BACKUP_RUNNING" == "no" ]]; then
  object_wrong='{"attachments": [{"color": "#fc0600", "title": "SERVER RESOURCE ALERT","text": "'"date: \$DATE UTC\n"' '"customer: $CUSTOMER_NAME\n"' '"server_ip: \$SERVER_IP\n"' '"cpu_used: \$CPU_USAGE_INT %\n"' '"ram_used: \$RAM_USAGE_INT %\n"'"}], "icon_emoji": "warning"}'
  touch "\$FLAG_FILE"
  curl -s -X POST -H 'Content-type: application/json' --data "\$object_wrong" \${SLACK_WEBHOOK_URL}
  rm ram_used
  exit
fi

if [[ -f "\$FLAG_FILE" && "\$RAM_USAGE_INT" -le 90 && "\$CPU_USAGE_INT" -le 85 ]]; then
  object_right='{"attachments": [{"color": "#2eb886", "title": "SERVER HEALTHY","text": "'"date: \$DATE UTC\n"' '"customer: $CUSTOMER_NAME\n"' '"server_ip: \$SERVER_IP\n"' '"cpu_used: \$CPU_USAGE_INT %\n"' '"ram_used: \$RAM_USAGE_INT %\n"'"}], "icon_emoji": "thumbsup"}]'
  rm "\$FLAG_FILE"
  curl -s -X POST -H 'Content-type: application/json' --data "\$object_right" \${SLACK_WEBHOOK_URL}
fi

rm ram_used
exit
EOF
chmod +x "$MONITOR_DIR/cpu-memory-monitor.sh"

cat > "$CRON_DIR/cpu-memory-monitor-cron" <<EOF
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
*/2 * * * * root /bin/bash $MONITOR_DIR/cpu-memory-monitor.sh
EOF

#############################################
# DISK MONITOR
#############################################
cat > "$BASE_DIR/disk-monitor.sh" <<EOF
#!/bin/bash
SLACK_WEBHOOK_URL="$SLACK_WEBHOOK_URL"
CUSTOMER_NAME="$CUSTOMER_NAME"
SERVER_NAME_FILE="/tmp/server_name.txt"
THRESHOLD=95
DATE=\$(date "+%Y-%m-%d %H:%M:%S")
SERVER_IP="$SERVER_IP"

if [ -f "\$SERVER_NAME_FILE" ]; then
  SERVER_NAME=\$(cat "\$SERVER_NAME_FILE")
else
  SERVER_NAME="Unknown Server"
fi

df -H | grep "/dev" | grep -v boot | grep -vE '^Filesystem|udev|tmpfs|cdrom' | awk '{ print \$5 " " \$1 " " \$6}' | while read output; do
  usage=\$(echo \$output | awk '{ print \$1}' | sed 's/%//g')
  partition=\$(echo \$output | awk '{ print \$2 " mounted on " \$3}')
  if [ "\$usage" -ge "\$THRESHOLD" ]; then
    message=":Warning: *Disk Usage Alert* \n *Date:* \$DATE \n *Customer:* $CUSTOMER_NAME \n *Server IP:* \$SERVER_IP \n *Partition:* \$partition \n *Usage:* \$usage%"
    curl -s -X POST -H 'Content-type: application/json' --data "{\\"text\\": \\"\$message\\"}" \$SLACK_WEBHOOK_URL
  fi
done
EOF
chmod +x "$BASE_DIR/disk-monitor.sh"

cat > "$CRON_DIR/disk-monitor-cron" <<EOF
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
*/10 * * * * root $BASE_DIR/disk-monitor.sh
EOF

#############################################
# OOM MONITOR
#############################################
cat > "$MONITOR_DIR/oom-monitor.sh" <<EOF
#!/bin/bash
LOGFILE="/var/log/syslog"
OOM_LOGFILE="/var/log/oom_monitor.log"
PATTERN="oom-killer"
CUSTOMER_NAME="$CUSTOMER_NAME"
SLACK_WEBHOOK_URL="$SLACK_WEBHOOK_URL"
ALERT_FILE="/tmp/oom_alert_sent"
PID_FILE="/tmp/oom_monitor.pid"
SERVER_IP="$SERVER_IP"
DATE=\$(date +%F-%H-%M-%S)

restart_services() {
    local service=\$1
    echo "Restarting \$service service..."
    case \$service in
        php-fpm) systemctl restart php*-fpm ;;
        mysql) systemctl restart mysql ;;
        nginx) systemctl restart nginx ;;
        varnish) systemctl restart varnish ;;
        apache2) systemctl restart apache2 ;;
        *) echo "Unknown service: \$service" ;;
    esac
}

if [ -e "\$PID_FILE" ] && kill -0 "\$(cat "\$PID_FILE")" 2>/dev/null; then
    exit 1
fi

echo \$\$ > "\$PID_FILE"
trap "rm -f \$PID_FILE" EXIT

journalctl -kf | while read -r line; do
    if echo "\$line" | grep -i "\$PATTERN" > /dev/null; then
        PROC_NAME=\$(echo "\$line" | grep -oP '(?<=process ).*?(?=score)')
        curl -s -X POST -H 'Content-type: application/json' --data "{\\"text\\": \\":warning: OOM Killer Alert! $CUSTOMER_NAME:\$SERVER_IP: \$line\\"}" "\$SLACK_WEBHOOK_URL"
        echo "== Top 5 CPU ==" >> \${OOM_LOGFILE}
        ps aux --sort=-%cpu | head -n 6 >> \${OOM_LOGFILE}
        echo "== Top 5 Memory ==" >> \${OOM_LOGFILE}
        ps aux --sort=-%mem | head -n 6 >> \${OOM_LOGFILE}
        case "\$PROC_NAME" in
            php*) restart_services "php-fpm" ;;
            mysql) restart_services "mysql" ;;
            nginx) restart_services "nginx" ;;
            varnish) restart_services "varnish" ;;
            apache2) restart_services "apache2" ;;
            *) restart_services "php-fpm"; restart_services "mysql"; restart_services "nginx"; restart_services "varnish"; restart_services "apache2" ;;
        esac
        echo "\$line" > "\$ALERT_FILE"
    fi
done
EOF
chmod +x "$MONITOR_DIR/oom-monitor.sh"

cat > "$CRON_DIR/oom-monitor-cron" <<EOF
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
* * * * * root $MONITOR_DIR/oom-monitor.sh >> /var/log/oom_monitor.log 2>&1
EOF

#############################################
# PHP-FPM MONITOR
#############################################
cat > "$MONITOR_DIR/phpfpm-monitor.sh" <<EOF
#!/bin/bash
LOCKFILE="/tmp/phpfpm-monitor.lock"
LOG_OUTPUT="/var/log/phpfpm-monitor.log"
SLACK_WEBHOOK_URL="$SLACK_WEBHOOK_URL"
CUSTOMER_NAME="$CUSTOMER_NAME"
RESTART_COOLDOWN=120
COOLDOWN_FILE="/tmp/phpfpm-restart-lasttime"
SERVER_IP="$SERVER_IP"

touch "\$LOG_OUTPUT"

log_message() {
    echo "\$(date '+%Y-%m-%d %H:%M:%S') : \$1" | tee -a "\$LOG_OUTPUT"
}

exec 200>"\$LOCKFILE"
flock -n 200 || exit 0
log_message "Script started."

FPM_SERVICE=\$(systemctl list-units --type=service --state=running | grep -oP 'php[\\d.]+-fpm(?=\\.service)')
if [ -z "\$FPM_SERVICE" ]; then
    log_message "No active PHP-FPM service found. Exiting."
    exit 1
fi

PHP_VERSION=\$(echo "\$FPM_SERVICE" | grep -oP '\\d+\\.\\d+')
LOG_FILE="/var/log/php\${PHP_VERSION}-fpm.log"

send_slack_alert() {
    local message="\$1"
    if [ -n "\$SLACK_WEBHOOK_URL" ]; then
        curl -s -X POST -H 'Content-type: application/json' --data "{\\"text\\": \\"\$message\\"}" "\$SLACK_WEBHOOK_URL" >/dev/null
        log_message "Slack alert sent: \$message"
    fi
}

restart_php_fpm() {
    local log_line="\$1"
    systemctl restart "\$FPM_SERVICE.service"
    if [ \$? -eq 0 ]; then
        send_slack_alert ":warning: PHP-FPM issue detected on $CUSTOMER_NAME (\$SERVER_IP). Service restarted: \${FPM_SERVICE}. Error line: \${log_line}"
    else
        send_slack_alert ":x: PHP-FPM restart failed on $CUSTOMER_NAME (\$SERVER_IP). Service: \${FPM_SERVICE}"
    fi
}

if [ ! -f "\$LOG_FILE" ]; then
    log_message "Log file \$LOG_FILE not found. Exiting."
    exit 1
fi

tail -n0 --follow=name --retry "\$LOG_FILE" | while read -r line; do
    if echo "\$line" | grep -qE "server reached pm.max_children|Too many open files"; then
        NOW=\$(date +%s)
        LAST_RESTART=0
        if [ -f "\$COOLDOWN_FILE" ]; then
            LAST_RESTART=\$(cat "\$COOLDOWN_FILE")
        fi
        if [ \$((NOW - LAST_RESTART)) -ge \$RESTART_COOLDOWN ]; then
            restart_php_fpm "\$line"
            echo "\$NOW" > "\$COOLDOWN_FILE"
        else
            log_message "Cooldown active. Skipping restart."
        fi
    fi
done
EOF
chmod +x "$MONITOR_DIR/phpfpm-monitor.sh"

cat > "$CRON_DIR/phpfpm-monitor-cron" <<EOF
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
* * * * * root $MONITOR_DIR/phpfpm-monitor.sh
EOF

echo "âœ… Installation complete. Scripts deployed and cron jobs configured."
