# cpu-memory-monitor-cron
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
*/2 * * * * root /bin/bash /var/cw/systeam/monitor-scripts-donot-delete/cpu-memory-monitor.sh

# cpu-memory-monitor.sh
      #!/bin/bash
      #-------Author: AHMAD SAMI --------------
      DATE=$(date "+%Y-%m-%d %H:%M:")
      LOGFILE=/var/log/cpu-memory-monitoring.log
      # Slack webhook URL
      SLACK_WEBHOOK_URL=""
      SERVER_IP=$(curl -s http://checkip.amazonaws.com)
      
      
      # Get CPU usage over 30 seconds
      CPU_USAGE_FLOAT=$(sar -P ALL 30 4 | grep 'Average:        all' | awk -F" " '{print 100.0 -$NF}')
      
      # Monitor RAM usage for 30 seconds
      i=1
      while [ $i -le 30 ]; do
        free | awk '/Mem/{printf("%.2f\n", $3/$2*100)}' >> ram_used
        ((i++))
        sleep 1
      done
      
      # Calculate average RAM usage
      Sum=$(awk '{sum+=$1} END {print sum}' ram_used)
      count=$(wc -l < ram_used)
      RAM_USAGE_INT=$(echo "$Sum / $count" | bc)
      
      # Convert CPU float to integer
      CPU_USAGE_INT=$(printf "%.0f" "$CPU_USAGE_FLOAT")
      FLAG_FILE="/tmp/flag_file_autogenerated"
      
      # Check if duplicity backup is running
      BACKUP_RUNNING=$(pgrep -f "duplicity" > /dev/null && echo "yes" || echo "no")
      
      # Check for HIGH CPU/Memory Usage and Duplicity Backup
      if [[ ("$CPU_USAGE_INT" -ge 95 || "$RAM_USAGE_INT" -ge 90) && "$BACKUP_RUNNING" == "yes" ]]; then
              echo "${DATE}: Backup Process running" >> ${LOGFILE}
              rm ram_used
              exit
      fi
      
      # If High CPU/Memory and No Duplicity Running
      if [[ ("$CPU_USAGE_INT" -ge 95 || "$RAM_USAGE_INT" -ge 90) && "$BACKUP_RUNNING" == "no" ]]; then
          object_wrong='{"attachments": [{"color": "#fc0600", "title": "SERVER RESOURCE ALERT","text": "'"date: $DATE UTC\n"' '"server_ip: $SERVER_IP\n"' '"cpu_used: $CPU_USAGE_INT %\n"' '"ram_used: $RAM_USAGE_INT %\n"'"}], "icon_emoji": "warning"}'
          touch "$FLAG_FILE"
          curl -X POST -H 'Content-type: application/json' --data "$object_wrong" ${SLACK_WEBHOOK_URL}
          rm ram_used
          exit
      fi
      
      # If Everything is Normal, Send a Healthy Alert
      if [[ -f "$FLAG_FILE" && "$RAM_USAGE_INT" -le 90 && "$CPU_USAGE_INT" -le 85 ]]; then
          object_right='{"attachments": [{"color": "#2eb886", "title": "SERVER HEALTHY","text": "'"date: $DATE UTC\n"' '"server_ip: $SERVER_IP\n"' '"cpu_used: $CPU_USAGE_INT %\n"' '"ram_used: $RAM_USAGE_INT %\n"'"}], "icon_emoji": "thumbsup" }'
          rm "$FLAG_FILE"
          curl -X POST -H 'Content-type: application/json' --data "$object_right" ${SLACK_WEBHOOK_URL}
      fi
      
      rm ram_used
      exit

# disk-monitor-cron
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

0 0 * * * root /var/cw/systeam/fetch_server_name.sh
*/10 * * * * root /var/cw/systeam/disk-monitor.sh

          #  /var/cw/systeam/fetch_server_name.sh

          #!/bin/bash
          # Authors: Sushant Chawla and Daniyal Azhar
          # Cloudways API credentials
          API_EMAIL="webadmin@besidegroup.com"
          API_KEY="DWIViP1TEY15jlyozBwUIJsNcrXjUI"
          TOKEN_URL="https://api.cloudways.com/api/v1/oauth/access_token"
          SERVER_URL="https://api.cloudways.com/api/v1/server"
          
          # File to store the server name
          SERVER_NAME_FILE="/tmp/server_name.txt"
          
          # Check if jq is installed, install if missing
          if ! command -v /usr/bin/jq &> /dev/null; then
            echo "jq is not installed. Installing..."
            sudo apt update && sudo apt install -y jq
            if [ $? -ne 0 ]; then
              echo "Failed to install jq. Please check your system configuration."
              exit 1
            fi
          fi
          
          # Fetch server public IP
          SERVER_IP=$(/usr/bin/curl -s -4 ifconfig.me)
          
          # Get access token
          ACCESS_TOKEN=$(curl -s -X POST $TOKEN_URL \
            -H "Content-Type: application/json" \
            -d "{\"email\":\"$API_EMAIL\", \"api_key\":\"$API_KEY\"}" | jq -r '.access_token')
          
          # Fetch server name
          SERVER_NAME=$(curl -s -X GET "$SERVER_URL" \
            -H "Authorization: Bearer $ACCESS_TOKEN" | jq -r '.servers[] | select(.public_ip=="'"$SERVER_IP"'") | .label')
          
          # Fallback if no server name is found
          if [ -z "$SERVER_NAME" ]; then
            SERVER_NAME="Unknown Server"
          fi
          
          # Save the server name to the file
          echo "$SERVER_NAME" > "$SERVER_NAME_FILE"

# /var/cw/systeam/disk-monitor.sh
      #!/bin/bash
      # Author: Sushant Chawla
      # Description: Monitor all mounted partitions and send alert on Slack channel if it exceeds threshold value
      
      # Slack webhook URL
      SLACK_WEBHOOK_URL=""
      
      # File to read the server name
      SERVER_NAME_FILE="/tmp/server_name.txt"
      
      # Disk usage threshold (in percentage)
      THRESHOLD=95
      
      # Date and hostname for the alert message
      DATE=$(date "+%Y-%m-%d %H:%M:%S")
      SERVER_IP=$(/usr/bin/curl -s -4 ifconfig.me)
      
      # Read server name from the file
      if [ -f "$SERVER_NAME_FILE" ]; then
        SERVER_NAME=$(cat "$SERVER_NAME_FILE")
      else
        SERVER_NAME="Unknown Server"
      fi
      
      # Check each partition
      df -H | grep "/dev" | grep -v boot | grep -vE '^Filesystem|udev|tmpfs|cdrom' | awk '{ print $5 " " $1 " " $6}' | while read output; do
        usage=$(echo $output | awk '{ print $1}' | sed 's/%//g')
        partition=$(echo $output | awk '{ print $2 " mounted on " $3}')
      
        if [ "$usage" -ge "$THRESHOLD" ]; then
          # Compose message for Slack
          message=":Warning: *Disk Usage Alert* \n *Date:* $DATE \n *Server Name:* $SERVER_NAME \n *Server IP:* $SERVER_IP \n *Partition:* $partition \n *Usage:* $usage%"
              echo $message
      
          # Send alert to Slack
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\": \"$message\"}" $SLACK_WEBHOOK_URL
        fi
      done


  # oom-monitor-cron
  PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
  * * * * * root /var/cw/systeam/monitor-scripts-donot-delete/oom-monitor.sh >> /var/log/oom_monitor.log 2>&1

# /var/cw/systeam/monitor-scripts-donot-delete/oom-monitor.sh
        #!/bin/bash
        # Author: Sushant Chawla
        # Description: Optimized OOM Killer Monitoring Script
        ###################
        # Global Variables
        ###################
        
        LOGFILE="/var/log/syslog"
        OOM_LOGFILE="/var/log/oom_monitor.log"
        PATTERN="oom-killer"
        CUSTOMER_NAME="1087812-khaleejdigital"
        SLACK_WEBHOOK_URL="https://hooks.slack.com/services/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"
        ALERT_FILE="/tmp/oom_alert_sent"  # To prevent duplicate alerts
        PID_FILE="/tmp/oom_monitor.pid"   # PID file to check if already running
        SERVER_IP=$(/usr/bin/curl -s -4 ifconfig.me)
        DATE=$(/bin/date +%F-%H-%M-%S)
        
        # Function to restart critical services
        restart_services() {
            local service=$1
            echo "Restarting $service service..."
            case $service in
                php-fpm) /etc/init.d/php$(php -v | head -n 1 | cut -d " " -f2 | cut -d "." -f1,2)-fpm restart ;;
                mysql) /etc/init.d/mysql restart ;;
                nginx) /etc/init.d/nginx restart ;;
                varnish) /etc/init.d/varnish restart ;;
                apache2) /etc/init.d/apache2 restart ;;
                *) echo "Unknown service: $service" ;;
            esac
        }
        
        # Check if the script is already running
        if [ -e "$PID_FILE" ] && kill -0 "$(cat "$PID_FILE")" 2>/dev/null; then
            exit 1
        fi
        
        # Write the current PID to the PID file
        echo $$ > "$PID_FILE"
        
        # Ensure PID file is removed on script exit
        trap "rm -f $PID_FILE" EXIT
        
        echo "${DATE}: Monitoring OOM killer instances in real-time using journalctl..."
        
        # Monitor OOM events in real-time using journalctl
        journalctl -kf | while read -r line; do
            if echo "$line" | grep -i "$PATTERN" > /dev/null; then
                echo "OOM killer instance detected: $line"
        
                # Extract process name if possible
                PROC_NAME=$(echo "$line" | grep -oP '(?<=process ).*?(?=score)')
        
                # Send the alert to Slack
                curl -s -X POST -H 'Content-type: application/json' \
                    --data "{\"text\": \":warning: OOM Killer Alert! ${CUSTOMER_NAME}:${SERVER_IP}: $line\"}" \
                    "$SLACK_WEBHOOK_URL"
        
                # Log top 5 CPU/Memory consuming processes in logs
                echo "== Top 5 CPU consuming processes ==" >> ${OOM_LOGFILE}
                /bin/ps aux --sort=-%cpu | head -n 6 >> ${OOM_LOGFILE}
                echo "== Top 5 Memory consuming processes ==" >> ${OOM_LOGFILE}
                /bin/ps aux --sort=-%mem | head -n 6 >> ${OOM_LOGFILE}
        
                # Determine which service needs a restart
                case "$PROC_NAME" in
                    php*) restart_services "php-fpm" ;;
                    mysql) restart_services "mysql" ;;
                    nginx) restart_services "nginx" ;;
                    varnish) restart_services "varnish" ;;
                    apache2) restart_services "apache2" ;;
                    *) echo "No specific service matched, restarting essential services..."
                       restart_services "php-fpm"
                       restart_services "mysql"
                       restart_services "nginx"phpfpm-monitor-cron
                       restart_services "varnish"
                       restart_services "apache2" ;;
                esac
        
                # Prevent duplicate alerts
                echo "$line" > "$ALERT_FILE"
            fi
        done

#  phpfpm-monitor-cron
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
* * * * * root /var/cw/systeam/monitor-scripts-donot-delete/phpfpm-monitor.sh

# /var/cw/systeam/monitor-scripts-donot-delete/phpfpm-monitor.sh

      #!/bin/bash
      
      # PHP-FPM Monitor Script
      # Author: Sushant Chawla
      # Updated: 21-Apr-2025
      
      LOCKFILE="/tmp/phpfpm-monitor.lock"
      LOG_OUTPUT="/var/log/phpfpm-monitor.log"
      SLACK_WEBHOOK_URL=""
      CUSTOMER_NAME="1087812-khaleejdigital"
      RESTART_COOLDOWN=120  # seconds
      COOLDOWN_FILE="/tmp/phpfpm-restart-lasttime"
      SERVER_IP=$(/usr/bin/curl -s -4 ifconfig.me)
      
      # Ensure log file exists
      touch "$LOG_OUTPUT"
      
      # Logging function
      log_message() {
          local message="$1"
          echo "$(date '+%Y-%m-%d %H:%M:%S') : $message" | tee -a "$LOG_OUTPUT"
      }
      
      # Acquire lock silently
      exec 200>"$LOCKFILE"
      flock -n 200 || exit 0
      
      log_message "Script started."
      
      # Detect active PHP-FPM service
      FPM_SERVICE=$(systemctl list-units --type=service --state=running | grep -oP 'php[\d.]+-fpm(?=\.service)')
      if [ -z "$FPM_SERVICE" ]; then
          log_message "No active PHP-FPM service found. Exiting."
          exit 1
      fi
      
      log_message "Detected active PHP-FPM service: $FPM_SERVICE"
      
      PHP_VERSION=$(echo "$FPM_SERVICE" | grep -oP '\d+\.\d+')
      LOG_FILE="/var/log/php${PHP_VERSION}-fpm.log"
      
      # Function to send Slack Notification
      send_slack_alert() {
          local message="$1"
          if [ -n "$SLACK_WEBHOOK_URL" ]; then
              curl -s -X POST -H 'Content-type: application/json' --data "{\"text\":\"$message\"}" "$SLACK_WEBHOOK_URL" >/dev/null
              log_message "Slack alert sent: $message"
          else
              log_message "Slack Webhook URL not set. Slack alert skipped."
          fi
      }
      
      restart_php_fpm() {
          local log_line="$1"
          log_message "Restarting PHP-FPM service: $FPM_SERVICE.service"
          systemctl restart "$FPM_SERVICE.service"
          if [ $? -eq 0 ]; then
              log_message "PHP-FPM restarted successfully."
              send_slack_alert ":warning: PHP-FPM issue detected on ${CUSTOMER_NAME} (${SERVER_IP}) at $(date). Service restarted: ${FPM_SERVICE}. Error line: ${log_line}"
          else
              log_message "Failed to restart PHP-FPM."
              send_slack_alert ":x: PHP-FPM restart failed on ${CUSTOMER_NAME} (${SERVER_IP}) at $(date). Service: ${FPM_SERVICE}"
          fi
      }
      
      # Check log file exists
      if [ ! -f "$LOG_FILE" ]; then
          log_message "Log file $LOG_FILE not found. Exiting."
          exit 1
      fi
      
      log_message "Monitoring PHP-FPM log file: $LOG_FILE"
      
      # Start tailing log file in real-time
      tail -n0 --follow=name --retry "$LOG_FILE" | while read -r line; do
          if echo "$line" | grep -qE "server reached pm.max_children|Too many open files"; then
              log_message "Detected error: $line"
      
              NOW=$(date +%s)
              LAST_RESTART=0
              if [ -f "$COOLDOWN_FILE" ]; then
                  LAST_RESTART=$(cat "$COOLDOWN_FILE")
              fi
      
              if [ $((NOW - LAST_RESTART)) -ge $RESTART_COOLDOWN ]; then
                  restart_php_fpm "$line"
                  echo "$NOW" > "$COOLDOWN_FILE"
              else
                  log_message "Cooldown active. Skipping restart."
              fi
          fi
      done
      
      # Release lock automatically when script exits
